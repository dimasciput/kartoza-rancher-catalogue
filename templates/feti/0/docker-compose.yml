# Rancher specific docker compose that uses image for django_project
# and no local storage
version: '2'

volumes:
  # Use a project specific prefix because if you name the same volume in
  # two different docker compose instances running on the
  # same host, they will use the same data volume!
  feti-pg-data-volume:
  feti-pg-setup-volume:
  feti-pg-backups-volume:
  feti-media-backups-volume:
  feti-media-volume:
  feti-reports-volume:
  feti-static-volume:
  feti-logs-volume:
  feti-django-project-volume:
  feti-nginx-volume:

services:
  # This must come first so that the nginx conf gets mounted into
  # the named volume volume otherwise the default one in the
  # nginx container will overwrite it.
  uwsgi: &uwsgi
    restart: unless-stopped
    # Change this to kartoza after testing
    image: timlinux/feti:latest
    hostname: uwsgi
    depends_on:
      - smtp
      - db
      - rabbitmq
      - worker
      - elasticsearch
      - dbbackups
    environment:
      ###### Rancher configurable options
      - ADMIN=${ADMIN_EMAIL}
      - ALLOWED_HOSTS=['django','localhost','${SITE_URL}',${DJANGO_ALLOWED_HOSTS}]
      - SITEURL=http://${SITE_URL}/
      #######
      - DEBUG=False
      - DATABASE_NAME=${POSTGRES_DB}
      - DATABASE_USERNAME=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASS}
      - DATABASE_HOST=db
      - RABBITMQ_HOST=rabbitmq
      - DJANGO_SETTINGS_MODULE=core.settings.prod_docker
      - VIRTUAL_HOST=users.inasafe.org
      - VIRTUAL_PORT=8080
      - HAYSTACK_HOST=elasticsearch
    volumes:
      # This ships in the feti image, we want to share it with other services
      - feti-nginx-volume:/etc/nginx/conf.d:ro
      # Setup data was copied into the image at docker build time
      - feti-pg-setup-volume:/home/setup
      # These volumes are created via docker / rancher
      - feti-static-volume:/home/web/static:ro
      - feti-media-volume:/home/web/media
      - feti-logs-volume:/var/log
      # I wonder why these are here and not in nginx ....
      #- /home/feti/deployment/webroot-path:/var/www/webroot
      # Not used yet
      #- /etc/letsencrypt:/etc/letsencrypt
    links:
      - smtp:smtp
      - db:db
      - elasticsearch:elasticsearch
      - rabbitmq:rabbitmq
      - worker:worker
  # This is normally the main entry point for a production server
  web:
    # read_only: true
    restart: unless-stopped
    image: nginx
    hostname: nginx
    volumes:
      # still need to get rid of this external file requirement
      # we can ship it in the django volume and reference it there
      # this way we avoid having to make a customised nginx for every
      # project
      - feti-nginx-volume:/etc/nginx/conf.d
      #- /home/feti/deployment/sites-enabled:/etc/nginx/conf.d:ro
      - feti-static-volume:/home/web/static
      - feti-media-volume:/home/web/media
      - feti-logs-volume:/var/log/nginx
    depends_on:
      - uwsgi
      - smtp
      - db
      - rabbitmq
      - worker
      - elasticsearch
      - dbbackups
    links:
      - uwsgi:uwsgi
    ports:
      - ${WEBSERVER_PORT}:8080

  smtp:
    restart: unless-stopped
    #  read_only: true
    image: catatnight/postfix
    hostname: postfix
    environment:
      # You could change this to something more suitable
      - maildomain=${SITE_URL}
      - smtp_user=noreply:docker

  elasticsearch:
    restart: unless-stopped
    #  read_only: true
    image: elasticsearch:2.4.2
    hostname: elasticsearch
    environment:
      - HAYSTACK_PORT=9200

  db: &db
    restart: unless-stopped
    image: kartoza/postgis:9.6-2.4
    volumes:
      - feti-pg-data-volume:/var/lib/postgresql
      - feti-pg-setup-volume:/home/setup
      - feti-pg-backups-volume:/backups
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - ALLOW_IP_RANGE=${POSTGRES_HBA_RANGE}

  dbbackups:
    restart: unless-stopped
    image: kartoza/pg-backup:9.6
    hostname: pg-backups
    volumes:
      - feti-pg-backups-volume:/backups
    links:
      - db:db
    depends_on:
      - db
    environment:
      - DUMPPREFIX=PG_FETI
      # These are all defaults anyway, but setting explicitly in
      # case we ever want to ever use different credentials
      - PGDATABASE=${POSTGRES_DB}
      - PGUSER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASS}
      - PGHOST=db
      - PGPORT=5432

  rabbitmq:
    image: library/rabbitmq
    hostname: rabbitmq
    environment:
       - RABBIT_PASSWORD=rabbit_test_password
       - USER=rabbit_user
       - RABBITMQ_NODENAME=rabbit

  worker:
    # Change this to kartoza after testing
    image: timlinux/feti:latest
    hostname: worker
    depends_on:
      - db
      - rabbitmq
      - elasticsearch
    command: celery worker -A feti.celery -l info  --beat
    environment:
      - DATABASE_NAME=${POSTGRES_DB}
      - DATABASE_USERNAME=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASS}
      - DATABASE_HOST=db
      # next line looks like a copy paste artifact? TS
      - DATABASE_QGIS_HOST=db_gis
      - RABBITMQ_HOST=rabbitmq
      - DJANGO_SETTINGS_MODULE=core.settings.prod_docker
      - VIRTUAL_HOST=staging.feti.kartoza.com
      - VIRTUAL_PORT=8080
      - C_FORCE_ROOT=true
      - HAYSTACK_HOST=elasticsearch
    volumes:
      - feti-static-volume:/home/web/static:ro
      - feti-media-volume:/home/web/media
      - feti-logs-volume:/var/log/nginx
      - feti-reports-volume:/home/web/reports
    links:
      - smtp:smtp
      - db:db
      - elasticsearch:elasticsearch
      - rabbitmq:rabbitmq
  #
  # Backups via btsync
  #
  btsync-data:
    # BTSync backups for database dumps
    image: kartoza/btsync
    hostname: btsync-data
    restart: unless-stopped
    volumes:
      - feti-pg-backups-volume:/web:rw
    environment:
      - SECRET=${BTSYNC_DB_SECRET}
      - DEVICE=FetiDatabase

  btsync-media:
    # BTSync backups for django media
    image: kartoza/btsync
    hostname: btsync-logs
    restart: unless-stopped
    volumes:
      - feti-media-backups-volume:/web:rw
    environment:
      - SECRET=${BTSYNC_MEDIA_SECRET}
      - DEVICE=FetiLogs

  #
  # Run-once services for system management
  #
  dbrestore:
    # This container will just run, a database restore on the latest database backup
    # and then exit. Restart it again in rancher to
    # rerun another database restore
    # Inherit from the db container
    <<: *db
    command: bash -c "su - postgres -c 'dropdb gis'; createdb -O ${POSTGRES_USER} -T template_postgis gis; pg_restore /backups/latest.dmp | psql gis"
    labels:
      io.rancher.container.pull_image: always
      io.rancher.container.start_once: true
    restart: unless-stopped

  collectstatic:
    # This container will just run, collect static
    # and then exit. Restart it again in rancher to
    # re-collect static resources.
    # Inherit from the uwsgi container
    <<: *uwsgi
    volumes:
      # override the volumes from uwsgi service because
      # static needs to be writable here
      - feti-static-volume:/home/web/static
    command: python manage.py collectstatic --noinput
    labels:
      io.rancher.container.pull_image: always
      io.rancher.container.start_once: true
    restart: unless-stopped

  migrate:
    # This container will just run, migrations
    # and then exit. Restart it again in rancher to
    # rerun migrations.
    # Inherit from the uwsgi container
    # We need to migrate accounts (auth) first as it has a reference to user model
    <<: *uwsgi
    command: bash -c "python manage.py migrate auth;python manage.py migrate"
    labels:
      io.rancher.container.pull_image: always
      io.rancher.container.start_once: true
    restart: unless-stopped
